{"meta":{"title":"MEET LIFE COURAGEOUSLY","subtitle":null,"description":null,"author":"Sojeong kim","url":"http://ksj12172.github.io","root":"/"},"pages":[],"posts":[{"title":"20190606_javascript","slug":"20190606-javascript","date":"2019-06-07T04:51:29.000Z","updated":"2019-06-07T05:00:30.423Z","comments":true,"path":"2019/06/07/20190606-javascript/","link":"","permalink":"http://ksj12172.github.io/2019/06/07/20190606-javascript/","excerpt":"","text":"Thursday, June 6th, 2019자바스크립트 공부하기! 출처는 생활코딩! 오늘 정리한 내용: javascript는 브러우저 조작&amp;서버사이드, data type, variable, 유효범위, var을 쓰는 것과 쓰지 않는 것의 차이, 수많은 변수, 유효변수의 효용, 전역변수, 유효범위 대상은 함수다, 정적 유효범위, 모듈화, jQuery, addEvent 3가지 방법, cross-browsing, 함수, 콜백 서버사이드 javascript웹서버에서 javascript를 웹서버에서도 사용할 수 있게 하는 기술들 : PHP, JAVA, python, ruby on rails 등 웹브라우저에 사용자가 주소를 입력하면 그 주소에 해당하는 컴퓨터를 찾아간다. 그 컴퓨터에 브라우저가 필요한 정보를 요청한다. 웹서버라는 소프트웨어가 요청한 정보를 찾아서 웹브라우저에 응답한다. 이때 응답하기 위한 기술들이다. 이를 대체하는 데 각광받고 있는 것이 Node.js 웹서버를 제어하는데 javascript를 쓸 수 있고 웹사이트를 만든다면 모두를 javascript를 통일시킬 수 있다. 언어의사소통을 위한 약속 프로그래밍 언어를 배운다는 것은 약속을 익힌다는 것이고 문법을 익힌다는 것이다. 환경환경은 언어를 사용하는 대상이다. 자바스크립트는 탈 웹브라우저, 탈웹 등 다양한 분야에서 사용되고 있어 javascript로 자바스크립트가 동작하는 환경에 ‘~[‘Hello world’]’ 한다. 누구에게? 웹브라우저에게 할 때는 ~이 alert다. node.js에게 write google spreadsheet에게 msgBox 환경에 따라서 명령어가 다르다. 도구도구는 중요하다 건설현장에서 삽과 포크레인 중 무엇이 더 생산적인가? 포크레인 개발도구는 생산성의 차이를 부르고, 인간의 인지가 가지는 한계를 개발도구로 극복할 수 있다. 다만, 생산성이 좋은 도구들은 다양한 수단들이 존재하기 때문에 그 도구를 익히는 데 충분한 시간과 노력이 필요하다. 프로그래밍이란 무엇인가개발자는 코드를 통해서 환경을 제어하는 것이다. 소프트웨어를 만드는 것이고 최종적으로 일반 사용자가 이를 사용하게 된다. DATA TYPE number alert(1); - alert는 경고창 자바스크립트에서 실수냐 정수냐는 중요하지 않다. 그냥 포괄적으로 number라고 한다. Math.pow(3,2) : 3^2, power는 거듭제곱 Math.round(10.6) : 반올림 Math.ceil(10.2) : 올림 Math.floor(10.2) : 내림 Math.sqrt(9) : 제곱근 Math.random() : 1 미만 실수, 따라서 *10, *100을 하면 그 수보다 작은 수가 나온다. Math.round(100*Math.random()) 문자 큰 따옴표 혹은 작은 따옴표로 감싸야 한다. 1alert(\"coding\") \\뒤의 문자는 정보로 해석한다. 따옴표가 아니라 12alert('egoing\\'s coding everybody');alert(\"coding\\neverybody\") //\\n은 줄바꿈 escape : 원래 임무로부터 탈출시킨다. 문자와 문자의 구획을 정하는 것이 아니라 문자로 인식하도록 typeof 1 : “number” typeof “1” : “string” 문자연산 : +, “~”.length “code”.indexOf(“c”) : 0 variable변수 : 값을 담는 컨테이너, 값을 유지할 필요가 있을 때 사용 1234var a = 1;alert(a+1) //2var b = \"coding\", c = \"everybody\"alert(b+c) var : 변수를 선언하겠다. - 유효범위와 관련 처음 선언할 때만 붙여준다. 변수는 코드의 재활용성을 높여준다. 변할 수 있는 영역과 변하지 않는 영역을 구분해야 한다. 유지하고 보수하는 것이 어려운 코드는 좋지 않은 코드다 유효범위(scope) : 변수의 수명함수 : 모듈화의 근간 정보를 감추고 객체의 행위를 정해놓는 것 cf) javascript는 객체지향이 독특하게 구현되어 있다. 123456var vscope = 'global';function fscope() &#123; var vscope = 'local' alert(vscope); // 함수 바깥에 있는 변수에 접근할 수 있다.&#125;fscope(); 같은 함수내에 있는 vscope을 찾고 없으면 바깥에 있는 vscope을 찾는다. 지역변수(local variable), 전역변수(global variable) 개념 지역변수는 함수의 중괄호 안쪽에서만, 그 지역에서만 접근할 수 있다. var을 쓰는 것과 쓰지 않는 것의 차이는?123456var vscope='global'function fscope()&#123; vscope=\"local\"&#125;fscope()alert(vscope)//local이 뜬다 function안에서 var vscope라고 하면 local 변수가 된다. function안에서 var을 안 쓰면 전역변수를 의미한다. 전역변수인 vscope을 변경한 것이 된다. 1234567var vscope='global'function fscope()&#123; var vscope='local' vscope = 'local' // 지역변수가 생성된 후이므로 지역변수를 가리킨다&#125;fscope()alert(vscope)//global 이미 지역변수가 생성된 후 vscope를 부르면 local 변수가 있는지 먼저 check. 지역변수가 있으므로 지역변수를 가리킨다. 수많은 변수: 지역변수 사용으로 충돌막기협업을 할 때 똑같은 변수를 다른 의미로 사용할 수 있다. 자신이 설계한 코드가 의도한대로 동작하지 않을 수 있다. fscope이라는 함수에서 사용하는 변수가 있다면 함수안에서만 사용할 수 있다. 지역변수를 사용하는 것이 충돌을 막는 법이다. 따라서 전역변수를 사용하면 좋지 않다. 어떤 변수를 사용할 때는 var로 선언하고 사용하기 유효변수의 효용1234567function a()&#123; var i=0; //var이 없다면 i&lt;5가 계속되기 때문에 무한루프를 돈다&#125;for (var i=0;i&lt;5;i++)&#123;//i는 전역변수 a() // 지역변수 i를 생성 document.write(i)//01234&#125; 이름앞에 prefix 붙여서 충돌하는 일 방지 지역변수와 전역변수는 directory와 비슷하다 전역변수의 사용cf) javascript 핵심가이드 불가피하게 전역변수를 사용해야 하는 경우는 하나의 객체를 전역변수로 만들고 객체의 속성으로 변수를 관리하는 방법을 사용한다. 변수가 충돌할 가능성이 현저히 줄어든다. null : 아직 값을 저장하지 않았다는 것을 프로그래머가 명시적으로 표시한 것 객체.~ : 속성값을 준다. 1234567891011121314MYAPP = &#123;&#125;MYAPP.calculator = &#123; 'left' : null, 'right' : null&#125;MYAPP.coordinate = &#123; 'left' : null, 'right': null&#125;MYAPP.calculator.left = 10MYAPP.calculator.right = 20function sum()&#123; return MYAPP.calculator.left + MYAPP.calculator.right&#125; 전역변수를 사용하고 싶지 않다면 익명함수를 호출해 해결할 수 있다. 함수를 정의하고 바로 호출 1234567891011121314151617(function()&#123; var MYAPP = &#123;&#125; //함수의 지역변수가 된다. MYAPP.calculator = &#123; 'left':null, 'right':null &#125; MYAPP.coordinate = &#123; 'left' : null, 'right': null &#125; MYAPP.calculator.left=10 MYAPP.calculator.right=20 function sum()&#123; return MYAPP.calculator.left+MYAPP.calculator.right &#125; document.write(sum())&#125;()) 제이쿼리에서도 사용할 수 있는 로직 모듈화라는 기법으로 많이 사용하고 있는 방법이다. 유효범위의 대상은 함수다함수에 대한 유효범위만 있다. 많은 언어들이 블록으로 {} 유효범위 제공. javascript도 for문 안에서 선언한 변수는 for문 밖에서 호출할 수 없다. - java javascript는 for문 밖에서도 사용 가능. 다시말해 for문이나 if 문 안에서 선언한 변수는 지역변수로서의 의미를 갖지 않는다. 오직 함수에서 선언한 변수만 지역변수로서 의미를 갖는다. 지역변수는 함수에서만 유효하다. 정적 유효범위사용될 때가 아니라! 정의될 때의 전역변수가 사용된다. 함수가 선언된 시점에서만 유효범위를 갖는다. static scoping, lexical scoping 1234567891011var i = 5;function a()&#123; var i=10; b();&#125;function b()&#123; document.write(i); // 지역변수 i가 없어. b가 선언된 시점에서 i의 전역변수 5가 사용된다. // 사용될 때가 아니라 정의될 때의 전역변수가 사용된다.&#125;a() cf) python도 정적스코프 파이썬 함수 내부에서 전역변수를 수정하려고 하면 에러가 난다. 1234a = 1def scope();: a = a+5scope() #unboundlocalError : local variable 'a' referenced before assignment 모듈이란코드의 재활용성을 높이고 유지보수를 쉽게 하기 위해서 다양한 기법을 활용한다. 그 중 하나가 코드를 여러개의 파일로 분리하는 것이다. 부품들을 모듈이라고 한다. 자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 재활용할 수 있다. 함수를 사용하는 모든 곳에서 변경사항이 적용된다. 하나의 파일 안에는 여러 개의 함수와 로직이 있을 수 있다. 코드 수정시에 필요한 로직을 빠르게 찾을 수 있다. 필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다. 한번 다운로드된 모듈은 웹브라우저에 의해서 저장되기 때문에 동일한 로직을 로드할 때 시간과 네트워크 트래픽을 절약할 수 있다. 자바스크립트 자체는 모듈 기능을 제공하지 않는다. 그러나 구동되는 호스트 환경에 따라서 서로 다른 모듈화 방법이 제공되고 있다. 호스트 환경에 따라서 모듈을 사용하는 방법이 달라진다. 웹 브라우저에서 파일을 모듈화하는 방법123456&lt;script type=\"text/javascript\" src=\"greeting.js\"&gt;&lt;/script&gt;&lt;body&gt; &lt;script type=\"text/javascript\"&gt; alert(welcome()) &lt;/script&gt;&lt;/body&gt; src라는 속성에 값이 있다면 이 파일 안의 내용을 script tag 사이에 집어넣는 것과 동일한 효과 greeting.js - welcome함수를 별도의 파일로 분리 123function welcome()&#123; return 'Hello world'&#125; Node.js에서의 모듈의 로드node.circle.js(로드될 대상) 1234567var PI = Math.PI;exports.area = function (r) &#123; return PI * r * r;&#125;exports.circumference = function(r)&#123; return 2*PI*r;&#125; node.demo.js(로드의 주체) 12var circle = require('./node.circle.js');console.log('The area of a circle of radius 4 is '+ circle.area(4)) node command prompt 창에서 node node.demo.js 라이브러리모듈과 비슷한 개념 모듈은 프로그램을 구성하는 작은 부품 라이브러리는 자주 사용하는 로직을 재사용하기 편리하도록 잘 정리한 일련의 코드들의 집합 오픈소스를 통해서 만들어진 수많은 라이브러리가 있다 javascript와 웹 브라우저가 허용하는 기능만 쓸 수 있다. 라이브러리는 로직들의 집합 - 서버와 쉽게 통신하기 위해서라든가 등을 위해 jQuery 라는 라이브러리를 많이 사용한다 jQueryjQuery 로직을쓰기 위해서는 다운로드 jQuery 또는 API documentation(jquery가 제공하는 명령어들의 집합) 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"greeting.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-1.12.4.js\" integrity=\"sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul id=\"list\"&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;/ul&gt; &lt;input type=\"button\" value=\"execute\" id=\"execute_btn\"&gt; &lt;script type=\"text/javascript\"&gt; $('#execute_btn').click(function()&#123; $('#list li').text('coding everybody') &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; jQeury를 쓰지 않는다면 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"greeting.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-1.12.4.js\" integrity=\"sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul id=\"list\"&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;li&gt;empty&lt;/li&gt; &lt;/ul&gt; &lt;input type=\"button\" value=\"execute\" id=\"execute_btn\" /&gt; &lt;script type=\"text/javascript\"&gt; function addEvent(target, eventType, eventHandler, useCapture)&#123; if(target.addEventListener)&#123; target.addEventListener(eventType, eventHandler, useCapture?useCapture:false); &#125; else if (target.attachEvent)&#123; var r = target.attachEvent(\"on\"+eventType, eventHandler); &#125; &#125; function clickHandler(event)&#123; var nav=document.getElementById('list'); for (var i =0; i&lt;nav.childNodes.length;i++)&#123; console.log(i) var child=nav.childNodes[i]; if(child.nodeType==3) continue; child.innerText = 'Coding everybody'; &#125; event.target.className= 'selected' &#125; addEvent(document.getElementById('execute_btn'), 'click', clickHandler); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; addEventListener()1234567&lt;input type=\"button\" id=\"target\" value=\"button\" /&gt;&lt;script&gt; var t = document.getElementById('target'); t.addEventListener('click', function(event)&#123; alert('Hello world, '+event.target.value); &#125;)&lt;/script&gt; addEventListener는 첫번째 인자로 event type을 받는다 event객체가 가지고 있는 여러가지 property 중 target : eventLister를 호출한 eventTarget, t객체 attachEvent for ie8 미만123456789101112&lt;script&gt; var t = document.getElementById('target'); if (t.addEventListener) &#123; t.addEventListener('click', function(event)&#123; alert('Hello world, '+event.target.value); &#125;) &#125; else if (t.attachEvent)&#123; t.attachEvent('onclick', function(event)&#123; alert('Hello world, '+event.target.value); &#125;) &#125;&lt;/script&gt; 복수의 동일 이벤트 타입 리스너 등록 가능12345678910&lt;input type=\"button\" id=\"target\" value=\"button\" /&gt;&lt;script&gt; var t=document.getElementById('target') t.addEventListener('click', function(event)&#123; alert(1); &#125;); t.addEventListener('click', function(event)&#123; alert(2); &#125;)&lt;/script&gt; property 방식 : 하나의 eventHandler만1234567891011121314&lt;input type=\"button\" id=\"target\" value=\"button\" /&gt;&lt;script&gt; var t= document.getElementById('target'); t.onclick = function(event) &#123; var event = event || window.event; var target = event.target || event.srcElement; alert(1); &#125; t.onclick = function(event)&#123; var event=event||window.event; var target = event.target || event.srcElement; alert(2) &#125;&lt;/script&gt; 2만 출력된다. cf) 이벤트 등록방법 1. inline 2. property 3. addEventListenerproperty listener이벤트 대상에 해당하는 객체의 프로퍼티로 이벤트를 등록하는 방식 1234567&lt;input type=\"button\" id=\"target\" value=\"button\" /&gt;&lt;script&gt; var t = document.getElementById('target') t.onclick=function()&#123; //이벤트 함수=eventHandler alert('Hello world') &#125;&lt;/script&gt; event 객체 : 이벤트가 실행된 맥락의 정보가 필요할 때 사용, 이벤트 객체는 이벤트가 실행될 때 이벤트 핸들러의 인자로 전달된다. 12345678910&lt;body&gt; &lt;input type=\"button\" id=\"target\" value=\"button\" /&gt;&lt;script&gt; var t = document.getElementById('target'); t.onlick = function(event)&#123; alert('Hello world, '+event.target.value) console.dir(event); //MouseEvent에 대한 여러 정보가 나온다. &#125;&lt;/script&gt;&lt;/body&gt; ie8 이하 버전 : 이벤트 객체를 핸들러의 인자가 아니라 전역객체의 event 프로퍼티로 제공한다. 또한 target property를 제공하지도 않는다. console.log(window.event) window.event 라는 전역객체의 프로퍼티로 event객체를 받아와야 한다. cross browsing이슈 1234567891011&lt;body&gt; &lt;input type=\"button\" id=\"target\" value=\"button\" /&gt; &lt;script&gt; var t = document.getElementById('target') t.onclick = function(event)&#123; var event = event || window.event;// event 객체가 없다면 console.log(event.target) var target = event.target || event.srcElement &lt;/script&gt; &lt;/body&gt; 현업에서는 라이브러리를 사용하므로 cross browsing이슈가 상다부분 해결된다. inline 이벤트 등록 방식이벤트를 이벤트 대상의 태그 속성으로 지정하는 것 1&lt;input type=\"button\" onclick=\"alert('Hello world');\" value=\"button\" /&gt; javascript this : 함수 안에서 사용할 경우 함수가 속해 있는 객체 input tag 안에서 this를 사용하는 경우 this는 input tag 123&lt;input type=\"button\" onclick=\"alert('Hello world, '+document.getElementById('target').value)\" value=\"button\" /&gt;&lt;input type=\"button\" onclick=\"alert('Hello world, '+this.value);\" value=\"button\" /&gt; 장점 : 이벤트의 소재를 파악하기 쉽다. 단점 : HTML은 정보를 담고, CSS는 디자인, javascript는 제어와 관련된 것만 담는 것이 지향점 javascript 코드가 HTML 안에 혼재되어 있는 것은 정보로서의 HTML 가치를 저하시킨다. 따라서 property 방식이나 addEventListener 방식이 좋다 하나의 listener를 여러 개의 eventTarget에 설치123456789101112131415161718&lt;input type=\"button\" id=\"target1\" value=\"button1\" /&gt;&lt;input type=\"button\" id=\"target2\" value=\"button2\" /&gt;&lt;script&gt; var t1 = document.getElementById('target1') var t2 = document.getElementById('target2') function btn_listener(event)&#123; switch(event.target.id)&#123; // switch는 if, else 비슷 case 'target1': alert(1) break case 'target2': alert(2) break &#125; &#125; t1.addEventListener('click', btn_listener) t2.addEventListener('click', btn_listener)&lt;/script&gt; Cross Browsingsource : 오마이사이트 : 웹 표준 기술을 채용하여 다른 기종/플랫폼에 따라 달리 구현되는 기술을 비슷하게 만듦과 동시에 어느 한쪽에 최적화되어 치우치지 않도록 공통요소를 사용하여 웹페이지를 제작하는 기법 Cross-browser compatibility(source : wiki ) : the ability of a website or web application to function across different browsers and degrade gracefully when browser features are absent or lacking. 왜 필요한가? 브라우저에 따라 바탕이 되는 시스템이나 표현의 구현 방식이 다르기 때문에 서로 다른 구현 방식으로도 최대한 비슷하게 표현되도록 웹 페이지를 제작하여 브라우저의 종류에 구애 받지 않고 웹을 이용할 수 있도록 하기 위함이다. 값으로서의 함수함수도 객체다. 일종의 값이다. 일급객체! : 변수, 매개변수, 리턴값으로 사용될 수 있다. first-class citizen/object/entity/value function a(){} var a =function(){} -&gt; 함수가 값이기 때문에 객체 안에 저장할 수 있다. 객체의 속성 값으로 담겨진 함수를 method라고 한다. 1234a = &#123; b : function()&#123; &#125;&#125; 함수가 값이기 때문에 다른 함수의 인자로 전달될 수도 있다. 1234567function cal(func, num)&#123; return func(num)&#125;function increase(num)&#123; return num+1&#125;alert(cal(increase, 1)) 함수는 함수의 리턴 값으로도 사용할 수 있다. 123456789function cal(mode)&#123; var funcs = &#123; 'plus':function(left, right)&#123;return left+right&#125;, 'minus':function(left, right)&#123;return left - right&#125; &#125; return funcs[mode];&#125;alert(cal('plus')(2,1))//cal('plus')() : 함수가 호출된다.alert(cal('minus')(2,1)) 배열의 값으로도 사용할 수 있다. 12345678910var process = [ function(input)&#123; return input+10;&#125;, function(input)&#123;return input*input;&#125;, function(input)&#123; return input/2;&#125;];var input= 1;for (var i =0; i &lt; process.length; i++)&#123; //i=0,1,2 input = process[i](input)&#125;alert(input); cf) 사용자 정의 객체 콜백sort함수로 정렬할 때 숫자의 경우 문자열로 형변환하기 때문에 숫자 10이 숫자 2보다 먼저 나온다. 123var numbers =[20,10,9,8,7,6,5,4,3,2,1]numbers.sort();//배열 객체에 sort라는 함수가 있다. 객체에 내장된 메소드console.log(numbers)//[1,10,2,20,3,4,5,6,7,8,9] 12345678910111213var numbers=[20,10,9,8,7,6,5,4,3,2,1]var sortfunc = function(a,b) &#123; console.log(a, b) if (a&gt;b)&#123; return 1; &#125; else if (a&lt;b)&#123; return -1; &#125; else&#123; return 0; &#125; &#125;console.log(numbers.sort(sortfunc))//올바르게 정렬 123456789var numbers=[20,10,9,8,7,6,5,4,3,2,1]var sortfunc = function(a,b) &#123; return b-a;&#125;console.log(numbers.sort(sortfunc))//sortfunc가 콜백함수, 내림차순정렬var sortfunc = function(a,b) &#123; return a-b;//비교해서 양수면 값을 바꾼다&#125;console.log(numbers.sort(sortfunc))//sortfunc가 콜백함수, 오름차순정렬 오늘은 여기까지!:)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://ksj12172.github.io/categories/TIL/"}],"tags":[{"name":"web browser","slug":"web-browser","permalink":"http://ksj12172.github.io/tags/web-browser/"},{"name":"server","slug":"server","permalink":"http://ksj12172.github.io/tags/server/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-06-05T07:32:04.456Z","updated":"2019-06-05T07:32:04.456Z","comments":true,"path":"2019/06/05/hello-world/","link":"","permalink":"http://ksj12172.github.io/2019/06/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}